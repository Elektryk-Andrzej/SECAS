# noinspection PyPep8
VEXISTS: list = ['{VEXISTS}', 'Whether or not the variable with the given name exists in the current context.', [['variableName', 'string', 'true', 'The name of the variable.']]]
CASSIESPEAKING: list = ['{CASSIESPEAKING}', 'Whether or not CASSIE is currently speaking.', []]
LOBBYLOCKED: list = ['{LOBBYLOCKED}', 'Indicates if the lobby is locked.', []]
# noinspection PyPep8
ISRUNNING: list = ['{ISRUNNING}', 'Whether or not a specific script is running.', [['scriptName', 'string', 'true', 'The name of the script.']]]
CHANCE: list = ['{CHANCE}', 'Always returns a random decimal between 0-1.', []]
CHANCE3: list = ['{CHANCE3}', 'Always returns a random number from 1-3.', []]
CHANCE5: list = ['{CHANCE5}', 'Always returns a random number from 1-5.', []]
CHANCE10: list = ['{CHANCE10}', 'Always returns a random number from 1-10.', []]
CHANCE20: list = ['{CHANCE20}', 'Always returns a random number from 1-20.', []]
CHANCE100: list = ['{CHANCE100}', 'Always returns a random number from 1-100.', []]
ESCAPES: list = ['{ESCAPES}', 'The amount of escapes. Equivalent to {CLASSDESCAPES} + {SCIENTISTESCAPES}.', []]
CLASSDESCAPES: list = ['{CLASSDESCAPES}', 'The amount of Class-D escapes.', []]
SCIENTISTESCAPES: list = ['{SCIENTISTESCAPES}', 'The amount of Scientist escapes.', []]
# noinspection PyPep8
FILTER: list = ['{FILTER}', 'Filters a player variable by a certain type.', [['name', 'string', 'true', 'The name of the variable to filter.'], ['type', 'string', 'true', 'The mode to use to filter. Valid modes: ROLE, ZONE, TEAM, ROOM, USERID, INV, HELDITEM, ISSTAFF'], ['input', 'string', 'true', 'What to use as the filter (RoleType, ZoneType, etc)']]]
# noinspection PyPep8
INDEXVAR: list = ['{INDEXVAR}', 'Indexes a player variable and gets ONE player at the specified position.', [['name', 'string', 'true', 'The name of the variable to index.'], ['type', 'int', 'true', 'The index. Number variables can be used (if they are decimal, the decimal portion will be removed)']]]
INTERCOMREADY: list = ['{INTERCOMREADY}', 'Indicates whether or not the intercom is ready to be used.', []]
INTERCOMINUSE: list = ['{INTERCOMINUSE}', 'Indicates whether or not the intercom is currently being used.', []]
INTERCOMCOOLDOWN: list = ['{INTERCOMCOOLDOWN}', "Indicates how much time is left on the intercom\'s cooldown.", []]
INTERCOMUSETIME: list = ['{INTERCOMUSETIME}', 'Indicates how much time is left for the intercom speaker to speak.', []]
# noinspection PyPep8
INTERCOMSPEAKER: list = ['{INTERCOMSPEAKER}', 'Gets the amount of players who are speaking on the intercom (always either 0 or 1).', []]
# noinspection PyPep8
KILLS: list = ['{KILLS}', 'The amount of kills, the amount of kills per-role, or -1 if an invalid role type is provided.', [['role', 'RoleTypeId', 'false', 'The role or team to filter by. Optional.']]]
SCPKILLS: list = ['{SCPKILLS}', 'The amount of SCP-related kills.', []]
DECONTAMINATED: list = ['{DECONTAMINATED}', 'Whether or not Light Containment Zone has been decontaminated.', []]
ENGAGEDGENERATORS: list = ['{ENGAGEDGENERATORS}', 'The amount of generators which are fully engaged.', []]
SCP914ACTIVE: list = ['{SCP914ACTIVE}', 'Whether or not SCP-914 is currently active.', []]
# noinspection PyPep8
DOORSTATE: list = ['{DOORSTATE}', "Reveals the state of a door (either \'OPEN\' or \'CLOSED\').", [['door', 'DoorType', 'true', 'The door to get the state of.']]]
PLAYERS: list = ['{PLAYERS}', 'The amount of players in the server.', []]
NPCS: list = ['{NPCS}', 'The amount of NPCs in the server.', []]
PLAYERSALIVE: list = ['{PLAYERSALIVE}', 'The amount of alive players in the server.', []]
PLAYERSDEAD: list = ['{PLAYERSDEAD}', 'The amount of dead players in the server.', []]
HUMANS: list = ['{HUMANS}', 'The amount of humans that are currently alive.', []]
SERVERSTAFF: list = ['{SERVERSTAFF}', 'The amount of staff on the server (RA access)', []]
# noinspection PyPep8
INROOM: list = ['{INROOM}', 'The amount of players in the specified room.', [['roomType', 'RoomType', 'false', 'The room to filter by.']]]
NONE: list = ['{NONE}', 'Will always be an empty variable with no players.', []]
GUARDS: list = ['{GUARDS}', 'The amount of facility guards alive. Equivalent to {FACILITYGUARD}', []]
MTFANDGUARDS: list = ['{MTFANDGUARDS}', 'The amount of facility guards & MTF alive.', []]
SCPS: list = ['{SCPS}', 'The amount of SCPs alive.', []]
MTF: list = ['{MTF}', 'The amount of MTF alive.', []]
CI: list = ['{CI}', 'The amount of Chaos Insurgency alive.', []]
SH: list = ['{SH}', "The amount of Serpent\'s Hand alive (always 0 if the plugin is not installed).", []]
UIU: list = ['{UIU}', 'The amount of UIU alive (always 0 if the plugin is not installed).', []]
SPECTATOR: list = ['{SPECTATOR}', 'The amount of Spectator\'s alive.', []]
CUSTOMROLE: list = ['{CUSTOMROLE}', 'The amount of CustomRole\'s alive.', []]
OVERWATCH: list = ['{OVERWATCH}', 'The amount of Overwatch\'s alive.', []]
FILMMAKER: list = ['{FILMMAKER}', 'The amount of Filmmaker\'s alive.', []]
TUTORIAL: list = ['{TUTORIAL}', 'The amount of Tutorial\'s alive.', []]
SCP173: list = ['{SCP173}', 'The amount of Scp173\'s alive.', []]
SCP106: list = ['{SCP106}', 'The amount of Scp106\'s alive.', []]
SCP049: list = ['{SCP049}', 'The amount of Scp049\'s alive.', []]
SCP0492: list = ['{SCP0492}', 'The amount of Scp0492\'s alive.', []]
SCP079: list = ['{SCP079}', 'The amount of Scp079\'s alive.', []]
SCP096: list = ['{SCP096}', 'The amount of Scp096\'s alive.', []]
SCP939: list = ['{SCP939}', 'The amount of Scp939\'s alive.', []]
CLASSD: list = ['{CLASSD}', 'The amount of ClassD\'s alive.', []]
SCIENTIST: list = ['{SCIENTIST}', 'The amount of Scientist\'s alive.', []]
FACILITYGUARD: list = ['{FACILITYGUARD}', 'The amount of FacilityGuard\'s alive.', []]
NTFPRIVATE: list = ['{NTFPRIVATE}', 'The amount of NtfPrivate\'s alive.', []]
NTFSERGEANT: list = ['{NTFSERGEANT}', 'The amount of NtfSergeant\'s alive.', []]
NTFSPECIALIST: list = ['{NTFSPECIALIST}', 'The amount of NtfSpecialist\'s alive.', []]
NTFCAPTAIN: list = ['{NTFCAPTAIN}', 'The amount of NtfCaptain\'s alive.', []]
CHAOSCONSCRIPT: list = ['{CHAOSCONSCRIPT}', 'The amount of ChaosConscript\'s alive.', []]
CHAOSRIFLEMAN: list = ['{CHAOSRIFLEMAN}', 'The amount of ChaosRifleman\'s alive.', []]
CHAOSREPRESSOR: list = ['{CHAOSREPRESSOR}', 'The amount of ChaosRepressor\'s alive.', []]
CHAOSMARAUDER: list = ['{CHAOSMARAUDER}', 'The amount of ChaosMarauder\'s alive.', []]
ROUNDENDED: list = ['{ROUNDENDED}', 'Whether or not the round has ended.', []]
ROUNDINPROGRESS: list = ['{ROUNDINPROGRESS}', 'Whether or not the round is in progress.', []]
ROUNDSTARTED: list = ['{ROUNDSTARTED}', 'Whether or not the round has started.', []]
ROUNDMINUTES: list = ['{ROUNDMINUTES}', 'The amount of elapsed round time, in minutes.', []]
ROUNDSECONDS: list = ['{ROUNDSECONDS}', 'The amount of elapsed round time, in seconds.', []]
# noinspection PyPep8
LOBBYTIME: list = ['{LOBBYTIME}', 'The amount of time remaining before the round starts. -1 if round already started.', []]
HEAVILYMODDED: list = ['{HEAVILYMODDED}', 'Whether or not this server is heavily modded.', []]
IP: list = ['{IP}', "This server\'s IP address.", []]
PORT: list = ['{PORT}', "This server\'s PORT.", []]
MAXPLAYERS: list = ['{MAXPLAYERS}', "This server\'s maximum player count.", []]
VERIFIED: list = ['{VERIFIED}', 'Whether or not this server is verified.', []]
# noinspection PyPep8
LEN: list = ['{LEN}', 'Reveals the length of a player variable.', [['name', 'string', 'true', 'The name of the player variable to retrieve the length of.']]]
# noinspection PyPep8
C: list = ['{C}', 'Convert a player variable into a format to use with commands.', [['name', 'string', 'true', 'The name of the player variable.']]]
# noinspection PyPep8
SHOW: list = ['{SHOW}', 'Reveal certain properties about the players in a player variable. This variable is designed to only be used with a player variable containing one player. However, it CAN be used with multiple players, and will list the display in the form of a comma-separated list.', [['name', 'string', 'true', 'The name of the player variable to show.'], ['selector', 'string', 'false', 'The type to show. Defaults to \"NAME\" Options: NAME, USERID, PLAYERID, ROLE, TEAM, ROOM, ZONE, HP, HEALTH, INV, INVCOUNT, HELDITEM.']]]
# noinspection PyPep8
RANDOMROOM: list = ['{RANDOMROOM}', 'Gets the RoomType of a random room. Can be filtered by zone.', [['zone', 'ZoneType', 'false', 'A zone to filter by (optional).']]]
LASTRESPAWNTEAM: list = ['{LASTRESPAWNTEAM}', 'The most recent team that spawn.', []]
NEXTWAVE: list = ['{NEXTWAVE}', 'The next team to spawn, either NineTailedFox, ChaosInsurgency, or None.', []]
LASTRESPAWNUNIT: list = ['{LASTRESPAWNUNIT}', "The most recent team\'s unit name.", []]
WAVERESPAWNING: list = ['{WAVERESPAWNING}', 'Whether or not a wave has respawned within the last 5 seconds.', []]
NTFTICKETS: list = ['{NTFTICKETS}', 'The amount of NTF tickets.', []]
CHAOSTICKETS: list = ['{CHAOSTICKETS}', 'The amount of Chaos Insurgency tickets.', []]
TOTALWAVES: list = ['{TOTALWAVES}', 'The amount of respawn waves.', []]
TIMEUNTILNEXTWAVE: list = ['{TIMEUNTILNEXTWAVE}', 'The amount of time until the next respawn wave, in seconds.', []]
# noinspection PyPep8
TIMESINCELASTWAVE: list = ['{TIMESINCELASTWAVE}', 'The amount of time since the last respawn wave, in seconds. If a respawn wave has not occurred yet, this value will be very large.', []]
# noinspection PyPep8
RESPAWNEDPLAYERS: list = ['{RESPAWNEDPLAYERS}', 'The amount of players that have respawned in the most recent respawn wave.', [['roleType', 'RoleTypeId', 'false', 'The role to filter by.']]]
CHAOSSPAWNS: list = ['{CHAOSSPAWNS}', 'Total amount of Chaos Insurgency respawns.', []]
MTFSPAWNS: list = ['{MTFSPAWNS}', 'Total amount of Mobile Task Force respawns.', []]
DETONATIONTIME: list = ['{DETONATIONTIME}', 'The amount of time until the warhead detonates.', []]
WARHEADCOUNTING: list = ['{WARHEADCOUNTING}', 'Whether or not the Alpha Warhead is currently counting down.', []]
WARHEADDETONATED: list = ['{WARHEADDETONATED}', 'Whether or not the warhead has been detonated.', []]
DAYOFWEEK: list = ['{DAYOFWEEK}', 'The current real-world day of the week, from 1-7, in UTC time.', []]
DAYOFMONTH: list = ['{DAYOFMONTH}', 'The current real-world day of the month, from 1-31, in UTC time.', []]
DAYOFYEAR: list = ['{DAYOFYEAR}', 'The current real-world day of the year, from 1-366, in UTC time.', []]
MONTH: list = ['{MONTH}', 'The current real-world month, from 1-12, in UTC time.', []]
YEAR: list = ['{YEAR}', 'The current real-world year, from 1-9999, in UTC time.', []]
TICK: list = ['{TICK}', '$"The amount of seconds since {new DateTime(1970, 1, 1):f}.', []]
HOUR: list = ['{HOUR}', '$"The current real-world hour, from 0-23.', []]
LCZ: list = ['{LCZ}', 'The amount of players in Light Containment Zone.', []]
HCZ: list = ['{HCZ}', 'The amount of players in Heavy Containment Zone.', []]
EZ: list = ['{EZ}', 'The amount of players in Entrance Zone.', []]
SURFACE: list = ['{SURFACE}', 'The amount of players on the Surface.', []]
POCKET: list = ['{POCKET}', 'The amount of players in the Pocket Dimension.', []]
